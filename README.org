:PROPERTIES:
:header-args: :session jlbumper
:END:
* Bumper.jl

Bumper.jl is an experimental package that aims to make working with bump allocators easy and safer (when used right).
You can dynamically allocate memory to these bump allocators, and reset them at the end of a code block, just like
Julia's default stack. Allocating to the a =AllocBuffer= with Bumper.jl can be just as efficient as stack allocation.

The point of this is to not have to pay the hefty cost of intermediate allocations.

Bumper.jl has a global default buffer, which starts off with =1MB= of capacity. You can change the default buffer size
with =set_default_buffer_size!(nbytes)= where =nbytes= is the new size of the default buffer. If a buffer runs out of
memory, it'll throw an error. Resizing a buffer which is in active use is not allowed, and should be
considered memory un-safe. 

The simplest way to use Bumper is to rely on its default buffer implicitly like so:
#+begin_src julia
using Bumper
using StrideArrays # Not necessary, but makes operations like broadcasting with Bumpers.jl faster.
# Some people might get some errors during precompilation when doing `using StrideArrays` related
# to Octavian.jl, you might have to do Pkg.add("Octavian@0.3.17")

function f(x::Vector{Int})
    @no_escape begin
        y = alloc(Int, length(x)) # This will allocate a `PtrArray` from StrideArraysCore.jl using memory from the default buffer.
        y .= x .+ 1
        sum(y)
    end
end

f([1,2,3])
#+end_src

#+RESULTS:
: 9


When you use =@no_escape=, you are promising that any code enclosed in the supplied code block will not leak any memory
created by =alloc=. That is, you are *only* allowed to do intermediate =alloc= allocations inside a =@no_escape= block,
and the lifetime of those allocations is the block. This is important. Once a =@no_escape= block finishes running, it
will reset its internal pointer to its position from before the block started.


Let's compare the performance of =f= to the equivalent with an intermediate heap allocation:

#+begin_src julia
using BenchmarkTools
#resize!(default_buffer().buf, 1000)
@benchmark f(x) setup=(x = rand(1:10, 30))
#+end_src

: BenchmarkTools.Trial: 10000 samples with 997 evaluations.
:  Range (min … max):  22.197 ns … 45.256 ns  ┊ GC (min … max): 0.00% … 0.00%
:  Time  (median):     22.909 ns              ┊ GC (median):    0.00%
:  Time  (mean ± σ):   23.060 ns ±  1.126 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%
: 
:         ▆█▇▂                                                   
:   ▂▂▂▃▅█████▇▅▄▄▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▂▂▁▂▂▂▂▂▂▂▂▂▂▂▂▁▁▂▁▂▂▂▂▂ ▃
:   22.2 ns         Histogram: frequency by time        27.4 ns <
: 
:  Memory estimate: 0 bytes, allocs estimate: 0.

and

#+begin_src julia
function g(x::Vector{Int})
    y = StrideArray{Int}(undef, length(x))
    y .= x .+ 1
    sum(y)
end

@benchmark g(x) setup=(x = rand(1:10, 30))
#+end_src

: BenchmarkTools.Trial: 10000 samples with 995 evaluations.
:  Range (min … max):  30.975 ns …   4.676 μs  ┊ GC (min … max):  0.00% … 98.25%
:  Time  (median):     74.342 ns               ┊ GC (median):     0.00%
:  Time  (mean ± σ):   72.151 ns ± 228.449 ns  ┊ GC (mean ± σ):  17.50% ±  5.47%
: 
:    █▂                                                           
:   ▂██▄▄▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▂▂▁▁▁▁▂▂▄▅▅▄▄▄▅▆▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂▂▂▁▂▂ ▃
:   31 ns           Histogram: frequency by time          111 ns <
: 
:  Memory estimate: 304 bytes, allocs estimate: 1.

Nice speedup!

However, we can actually do better if we're okay with manually manipulating some state. The way I invoked =@no_escape= and =alloc= implicitly used
the default buffer, and fetching that default buffer is not as fast as using a =const= global variable, because Bumper.jl is working to protect
you against concurrency bugs (more on that in the next section).

If we provide the buffer to =f= explicitly, these safety features aren't needed:
#+begin_src julia
function f(x, buf::AllocBuffer)
    @no_escape buf begin # <----- Notice I specified buf here
        y = alloc(Int, buf, length(x)) # <----- and here
        y .= x .+ 1
        sum(y)
    end
end

@benchmark f(x, buf) setup=(x = rand(1:10, 30);
                            buf = default_buffer())
#+end_src

: BenchmarkTools.Trial: 10000 samples with 999 evaluations.
:  Range (min … max):  10.119 ns … 23.664 ns  ┊ GC (min … max): 0.00% … 0.00%
:  Time  (median):     10.340 ns              ┊ GC (median):    0.00%
:  Time  (mean ± σ):   10.374 ns ±  0.456 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%
: 
:   ▁ ▁ ▂▃▄▇▄█▅▆▁                                               ▂
:   █▄████████████▆▆▁▁▃▃▁▄▃▁▁▄▅▃▁▁▁▃▁▄▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▃▃▄▃▃▁▃ █
:   10.1 ns      Histogram: log(frequency) by time      11.5 ns <
: 
:  Memory estimate: 0 bytes, allocs estimate: 0.

Running =default_buffer()= will give you the current task's default buffer, or you can explicitly construct an =N= byte buffer by calling =AllocBuffer(N)=.

E.g. if we want to do something that requires a very large buffer temporarily, we could do this:
#+begin_src julia
let x = rand(1:100, 10_000_000), buf = AllocBuffer(2*sizeof(x))
    f(x, buf)
end
#+end_src

: 515035101


Some miscellaneous notes:
+ =@no_escape= blocks can be nested as much as you want (so long as the allocator has enough memory to store the objects you're using.
+ =alloc(T, n...)= is dynamically scoped, meaning that you can have deeply nested =alloc= calls inside a =@no_escape= block, and they'll
  still use the same default buffer, and be reset once the block ends.
+ As mentioned previously, *Do not allow any memory which was initialized inside a* =@no_escape= *block to escape the block.* Doing so can cause memory
  corruptuon.
+ You can use =alloc= outside of an =@no_escape= block, but that will leak memory from the buffer and cause it to overflow if you do it to many times.
  If you accidentally do this, and need to reset the buffer, use =Bumper.reset_buffer!(::AllocBuffer)=.
+ =alloc(T, n...)= creates a =StrideArraysCore.PtrArray{T, length(n)}=.
+ In order to be lightweight, Bumper.jl only depends on StrideArraysCore.jl, not the full [[https://github.com/JuliaSIMD/StrideArrays.jl][StrideArrays.jl]], so if you need some of
  the more advanced functionality from StrideArrays.jl itself, you'll need to do =using StrideArrays= separately.
+ Bumper.jl is experimental, and may have bugs. Let me know if you find any. Contributing to the test suite would be greatly appreciated.

** Concurrency and parallelism

Every task has its own *independent* default buffer which inherit the size of their parent's task buffer. A task's buffer is only created
if it is used, so this does not slow down the spawning of Julia tasks in general. Here's a demo that the default buffers are different:

#+begin_src julia
using Bumper
let b = default_buffer() # The default buffer on the main task
    t = @async default_buffer() # Get the default buffer on an asychronous task
    fetch(t) === b
end
#+end_src

: false


Whereas if we don't spawn any tasks, we don't have to worry about unnecessary buffer creation:

#+begin_src julia
let b = default_buffer() # The default buffer on the main task
    b2 = default_buffer() # Get the default buffer on an asychronous task
    b2 === b
end
#+end_src

: true

Because of this, we don't have to worry about =@no_escape begin ... alloc() ... end= blocks on different threads or tasks interfering
with eachother, so long as they are only operating on buffers local to that task or the =default_buffer()=.

** Changing buffers

If for some reason you want to run a chunk of code with the default bufferr temporarily modified, you can use =with_buffer(f, b)= for that:

#+begin_src julia
let b = default_buffer()
    with_buffer(AllocBuffer(100)) do
        b === default_buffer()
    end
end
#+end_src

: false


This is dynamically scoped, so any nested function calls inside the =with_buffer= block will see a modified =default_buffer=.

** Advanced usage with StaticCompiler.jl

Bumper.jl can be useful to those who are trying to compile standalone static binaries with StaticCompiler.jl since those binaries
do not have Julia's GC available to them. To do so, we won't be able to count on the global default buffer or =with_buffer=, but
will instead have to explicitly provide it. We'll also need to use =alloc_nothrow= instead due to a current limitation of
StaticCompiler.

#+begin_src julia
using Bumper, StaticCompiler, StaticTools
function foo(argc::Int, argv::Ptr{Ptr{UInt8}})
    n = argparse(Int, argv, 2)
    v = MallocArray{UInt8}(undef, 100) # 100 bytes of malloc'd memory to work with.
    buf = AllocBuffer(v) # create an AllocBuffer{MallocVector{UInt8}} because regular Vector doesn't work in this mode.
   
    s = 0
    for i ∈ 1:10000
        @no_escape buf begin # <----- Note that we specify buf here.
            # allocate a chunk of n bytes at a time before resetting, so we don't spill over our 100 byte limit
            x = alloc_nothrow(Int, buf, n) # <--- Note that we're using alloc_nothrow
            x .= 1
            s += sum(x)
        end
    end
    
    printf(c"The sum is: %d\n", s)
    free(v)
end

compile_executable(foo, (Int, Ptr{Ptr{UInt8}}), "./") # compile it to an execuable

run(`./foo 5`) # run it
#+end_src

: The sum is: 50000
: Process(`./foo 5`, ProcessExited(0))

